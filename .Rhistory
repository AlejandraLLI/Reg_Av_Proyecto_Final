for(i in 1:1000){
#Simulación bootstrap: Estimador de interés theta =e ^(2*lambda)
theta_boot <- bootstrap(x= muestra_poisson$p, nboot=10000, theta = theta_gorro)
#Usar la función *bootstrap* me regresa una lista por lo que necesito pasarla a numérico para        poder hacer operaciones matemáticas con ellos
theta_boot_f <-(as.numeric(unlist(theta_boot[1])))
#Intervalo NORMAL
LI_norm <-round(mean(theta_boot_f) - 1.96 * sd(theta_boot_f), 8)
LS_norm <-round(mean(theta_boot_f) + 1.96 * sd(theta_boot_f), 8)
# Intervalo PERCENTIL
LI_perc <- round(quantile(theta_boot_f, prob = 0.025), 8)
LS_perc <- round(quantile(theta_boot_f, prob = 0.975), 8)
# Intervalo por BCa
BCA <-bcanon(x = muestra_poisson[,1], nboot = 10000, theta = theta_gorro)
intervalo_Ch_normal <- checa_Intervalos(LI_norm, LS_norm)
intervalo_Ch_percentil <- checa_Intervalos(LI_perc,LS_perc)
intervalo_Ch_bca <- checa_Intervalos(BCA$confpoints[1,2],BCA$confpoints[8,2])
resultado_df[nrow(resultado_df)+1,] <- list("normal", intervalo_Ch_normal[1], intervalo_Ch_normal[2], intervalo_Ch_normal[3], intervalo_Ch_normal[4], LI_norm, LS_norm)
resultado_df[nrow(resultado_df)+1,] <- list("percentil", intervalo_Ch_percentil[1], intervalo_Ch_percentil[2], intervalo_Ch_percentil[3], intervalo_Ch_percentil[4], LI_perc, LS_perc)
resultado_df[nrow(resultado_df)+1,]<-list("bca", intervalo_Ch_bca[1], intervalo_Ch_bca[2], intervalo_Ch_bca[3], intervalo_Ch_bca[4],BCA$confpoints[1,2], BCA$confpoints[8,2])
}
normal_df <- filter(resultado_df, Metodo=="normal")
total <- nrow(normal_df)
porcentaje_fallo_izq_normal <- sum(normal_df$Fallo_Izquierda ==1)/total*100
porcentaje_fallo_der_normal <- sum(normal_df$Fallo_Derecha ==1)/total*100
cobertura_normal <- sum(normal_df$En_intervalo ==1)/total*100
longitud_normal <- mean(normal_df$Longitud)
percentil_df <- filter(resultado_df, Metodo=="percentil")
total <- nrow(percentil_df)
porcentaje_fallo_izq_percentil <- sum(percentil_df$Fallo_Izquierda ==1)/total*100
porcentaje_fallo_der_percentil <- sum(percentil_df$Fallo_Derecha ==1)/total*100
cobertura_percentil <- sum(percentil_df$En_intervalo ==1)/total*100
longitud_percentil <- mean(percentil_df$Longitud)
bca_df <- filter(resultado_df, Metodo=="bca")
total <- nrow(bca_df)
porcentaje_fallo_izq_bca <- sum(bca_df$Fallo_Izquierda ==1)/total*100
porcentaje_fallo_der_bca <- sum(bca_df$Fallo_Derecha ==1)/total*100
cobertura_bca <- sum(bca_df$En_intervalo ==1)/total*100
longitud_bca <- mean(bca_df$Longitud)
tabla_resumen <- data.frame(Metodo = character(0), P_Fallo_Izq = numeric(0), P_Fallo_Derecha = numeric(0), Cobertura = numeric(0), Longitud_Promedio=numeric(0),stringsAsFactors=FALSE)
tabla_resumen[nrow(tabla_resumen)+1,]<-list("Normal", porcentaje_fallo_izq_normal, porcentaje_fallo_der_normal, cobertura_normal, longitud_normal)
tabla_resumen[nrow(tabla_resumen)+1,]<- list("Percentiles", porcentaje_fallo_izq_percentil, porcentaje_fallo_der_percentil, cobertura_percentil, longitud_percentil)
tabla_resumen[nrow(tabla_resumen)+1,]<- list("BC_a", porcentaje_fallo_izq_bca, porcentaje_fallo_der_bca, cobertura_bca, longitud_bca)
tabla_resumen
?rnorm
n <- rnorm(n=1, mean=40000, sd= 10000)
n
ahorro <- rnorm(n=n, mean = 5, sd=4)
ahorro
n <- rnorm(n=1, mean=40000, sd= 10000)
n
ahorro <- rnorm(n=n, mean = 5, sd=4)
sum(ahorro)
library(R2jags)
prob<-function(x){
out<-min(length(x[x>0])/length(x),length(x[x<0])/length(x))
out
}
Reading data-
## Reading data-
desastres<-read.table("http://allman.rhon.itam.mx/~lnieto/index_archivos/desastres.txt",header=TRUE)
n<-nrow(desastres)
plot(desastres,type="l")
plot(desastres[2:n,2]-desastres[1:(n-1),2],type="l")
plot(log(desastres[2:n,2])-log(desastres[1:(n-1),2]),type="l")
## Reading data-
desastres<-read.table("http://allman.rhon.itam.mx/~lnieto/index_archivos/desastres.txt",header=TRUE)
n<-nrow(desastres)
plot(desastres,type="l")
#-Defining data-
data<-list("n"=n,"y"=desastres$No.Desastres,"x"=desastres$Anho) #Datos completos
#-Defining data-
data<-list("n"=n,"y"=desastres$No.Desastres,"x"=desastres$Anho) #Datos completos
#-Defining inits-
inits<-function(){list(beta=rep(0,2),yf1=rep(1,n))}
#-Selecting parameters to monitor-
parameters<-c("beta","yf1","mu")
#JAGS
ej6a.sim<-jags(data,inits,parameters,model.file="Ej6a.txt",
n.iter=50000,n.chains=2,n.burnin=5000, n.thin = 1)
out<-ej6a.sim$BUGSoutput$sims.list
z<-out$mu[,1]
par(mfrow=c(2,2))
plot(z,type="l")
plot(cumsum(z)/(1:length(z)),type="l")
hist(z,freq=FALSE)
acf(z)
z<-out$beta
par(mfrow=c(1,1))
plot(z)
#-Defining data-
data<-list("n"=n,"y"=desastres$No.Desastres,"x"=desastres$Anho) #Datos completos
#-Defining inits-
inits<-function(){list(beta=rep(0,2),yf1=rep(1,n))}
#-Selecting parameters to monitor-
parameters<-c("beta","yf1","mu")
#JAGS
ej6a.sim<-jags(data,inits,parameters,model.file="Ej6a.txt",
n.iter=50000,n.chains=2,n.burnin=5000, n.thin = 1)
#-Defining data-
data<-list("n"=n,"y"=desastres$No.Desastres,"x"=desastres$Anho) #Datos completos
#-Defining inits-
inits<-function(){list(beta=rep(0,2),yf1=rep(1,n))}
#-Selecting parameters to monitor-
parameters<-c("beta","yf1","mu")
#JAGS
ej6a.sim<-jags(data,inits,parameters,model.file="Ej6a.txt",
n.iter=50000,n.chains=2,n.burnin=5000, n.thin = 1)
out<-ej6a.sim$BUGSoutput$sims.list
z<-out$mu[,1]
par(mfrow=c(2,2))
plot(z,type="l")
plot(cumsum(z)/(1:length(z)),type="l")
hist(z,freq=FALSE)
acf(z)
z<-out$beta
par(mfrow=c(1,1))
plot(z)
#Resumen (estimadores)
#JAGS
out.sum<-ej6a.sim$BUGSoutput$summary
#Tabla resumen
out.sum.t<-out.sum[grep("beta",rownames(out.sum)),c(1,3,7)]
out.sum.t<-cbind(out.sum.t,apply(out$beta,2,prob))
dimnames(out.sum.t)[[2]][4]<-"prob"
print(out.sum.t)
#DIC
out.dic<-ej6bb.sim$DIC
#DIC
out.dic<-ej6a.sim$BUGSoutput$DIC
print(out.dic)
#Predictions
out.yf<-out.sum[grep("yf1",rownames(out.sum)),]
ymin<-min(desastres[,2],out.yf[,c(1,3,7)])
ymax<-max(desastres[,2],out.yf[,c(1,3,7)])
par(mfrow=c(1,1))
plot(desastres,type="l",col="grey80",ylim=c(ymin,ymax))
lines(desastres[,1],out.yf[,1],lwd=2,col=2)
lines(desastres[,1],out.yf[,3],lty=2,col=2)
lines(desastres[,1],out.yf[,7],lty=2,col=2)
lines(desastres[,1],out.yf[,5],lwd=2,col=4)
#Medias
out.mu<-out.sum[grep("mu",rownames(out.sum)),]
par(mfrow=c(1,1))
plot(desastres,type="l",col="grey80")
lines(desastres[,1],out.mu[,1],lwd=2,col=2)
lines(desastres[,1],out.mu[,3],lty=2,col=2)
lines(desastres[,1],out.mu[,7],lty=2,col=2)
devtools::install_github("rstudio/keras")
install.packages("devtools")
devtools::install_github("rstudio/keras")
library(keras)
install_keras()
library(keras)
install_keras()
library(keras)
install_keras()
pip install --upgrade pip
library(keras)
from keras.models import Sequential
model = Sequential()
from keras.models import Sequential
from keras_model import Sequential
library(keras)
boston_housing <- dataset_boston_housing()
c(train_data, train_labels) %<-% boston_housing$train
c(test_data, test_labels) %<-% boston_housing$test
paste0("Training entries: ", length(train_data), ", labels: ", length(train_labels))
train_data[1, ] # Display sample features, notice the different scales
library(tibble)
column_names <- c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE',
'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT')
train_df <- as_tibble(train_data)
colnames(train_df) <- column_names
train_df
train_labels[1:10] # Display first 10 entries
# Test data is *not* used when calculating the mean and std.
# Normalize training data
train_data <- scale(train_data)
# Use means and standard deviations from training set to normalize test set
col_means_train <- attr(train_data, "scaled:center")
col_stddevs_train <- attr(train_data, "scaled:scale")
test_data <- scale(test_data, center = col_means_train, scale = col_stddevs_train)
train_data[1, ] # First training sample, normalized
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu",
input_shape = dim(train_data)[2]) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list("mean_absolute_error")
)
model
}
model <- build_model()
model %>% summary()
# Display training progress by printing a single dot for each completed epoch.
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
epochs <- 500
# Fit the model and store training stats
history <- model %>% fit(
train_data,
train_labels,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(print_dot_callback)
)
library(ggplot2)
plot(history, metrics = "mean_absolute_error", smooth = FALSE) +
coord_cartesian(ylim = c(0, 5))
# The patience parameter is the amount of epochs to check for improvement.
early_stop <- callback_early_stopping(monitor = "val_loss", patience = 20)
model <- build_model()
history <- model %>% fit(
train_data,
train_labels,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(early_stop, print_dot_callback)
)
plot(history, metrics = "mean_absolute_error", smooth = FALSE) +
coord_cartesian(xlim = c(0, 150), ylim = c(0, 5))
c(loss, mae) %<-% (model %>% evaluate(test_data, test_labels, verbose = 0))
paste0("Mean absolute error on test set: $", sprintf("%.2f", mae * 1000))
test_predictions <- model %>% predict(test_data)
test_predictions[ , 1]
install.packages("shiny")
install.packages("missForest")
install.packages(missForest, dependencies = TRUE)
library("missForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(missForest, dependencies = TRUE)
uninstall.packages("missForest")
install.packages("uninstall.packages")
remove.packages("missForest")
install.packages(missForest, dependencies = TRUE)
install.packages("missForest")
remove.packages("missForest")
install.packages(missForest, dependencies = TRUE)
install.packages("missForest", dependencies = TRUE)
library(missForest)
library(missForest)
data("iris")
data("iris")
iris.mis <- prodNA(iris, noNA = 0.1)
summary(iris.mis)
iris.imp <- missForest(iris.mis)
summary(iris.omp)
summary(iris.imp)
summary(iris.imp$ximp)
View(iris.imp)
View(iris)
class(iris$Sepal.Length)
class(iris$Sepal.Width)
class(iris$Petal.Length)
class(iris$Species)
knitr::opts_chunk$set(echo = FALSE)
setwd("~/Desktop/Proyecto_reg")
# Cargamos librerias
library(R2jags) # Para simulaciones
library(tidyverse) # Para manipular datos
library(xtable) # para edición de tablas
library(pastecs)#para analisis descriptivo de datos
source('02_Utils.R')
source('01_Clean_Data_Petroleo.R')
# Seleccioanmos el set de datos a usar
datos<-datos_1_estand
# Extraemos las fechas
Fecha<-datos$Fecha
# Eliminamos la fecha de los datos
datos <- select(datos, -Fecha)
# Función para graficar series de tiempo con estos datos.
plot_ts_datos<-plot_ts(datos,Fecha)
# No. obs predicción
n <- nrow(datos)
# No. obs pronosticos
m <- 3
# No. regresores
k<- 6
# hyperparametros
niter<-20000
nchains<-2
nburning<-0.1*niter
semilla<-3567
# Seleccioanmos el set de datos a usar
datos<-datos_1_estand
# Extraemos las fechas
Fecha<-datos$Fecha
# Eliminamos la fecha de los datos
datos <- select(datos, -Fecha)
# Función para graficar series de tiempo con estos datos.
plot_ts_datos<-plot_ts(datos,Fecha)
# WTI
plot_ts_datos('WTI','firebrick1','West Texas Intermediate','Dólares por barril')
par(mfrow=c(3,2))
# JPM_Dollar_Index
plot_ts_datos('JPM_Dollar_Index','royalblue1','JPM Dollar Index','Unidades')
# VIX_Index
plot_ts_datos('VIX_Index','darkgoldenrod1','VIX','Unidades')
# OPEP_TOTPROD
plot_ts_datos('OPEP_TOTPROD','olivedrab','Producción de la OPEP','Millones de barriles')
# OPEP_TOTDEM
plot_ts_datos('OPEP_TOTDEM','lightblue1','Demanda de la OPEP','Millones de barriles')
# JPM_Dollar_Index
plot_ts_datos('TBILL_10YR','coral','Tasa Largo Plazo EU','Porciento')
# JPM_Dollar_Index
plot_ts_datos('TBILL_1YR','mediumpurple1','Tasa Corto Plazo EU','Porciento')
# Seleccioanmos el set de datos a usar
datos<-datos_1_estand
# Extraemos las fechas
Fecha<-datos$Fecha
# Eliminamos la fecha de los datos
datos <- select(datos, -Fecha)
# Función para graficar series de tiempo con estos datos.
plot_ts_datos<-plot_ts(datos,Fecha)
# Modelo de regresón con enfoque clásico
modelo_RegLin_Std <- lm(data = datos, formula = WTI ~ .)
tabla_mod_RegLin_Std<-summary(modelo_RegLin_Std)$coefficients
rownames(tabla_mod_RegLin_Std)<-c('Intercepto','JPM Dollar Ind.','VIX Ind.','Prod. OPEP','Dem. OPEP', 'TBILL-1OYR','TBILL-1YR')
colnames(tabla_mod_RegLin_Std)<-c('Estimación','Desv. Est.','Valor t','Valor-p')
tabla_mod_RegLin_Std<-xtable(tabla_mod_RegLin_Std,
caption='Coeficientes Estimados para el Modelo de Regresión Clásico \\eqref{eq:RegLin_Std}',
label='tabla:coef_mod_RegLin_Std')
align(tabla_mod_RegLin_Std)<-'l|rrrr'
print(tabla_mod_RegLin_Std,comment=FALSE,caption.placement = 'top')
modelo_RegLin_Std
source('Modelos/Modelo_Estatico_Std.R')
#Tabla resumen
out_estat_std.sum.t_tabla<-xtable(out_estat_std.sum.t,
caption='Coeficientes Estimados para el Modelo \\eqref{eq:mod_estatico_Std}',
label='tabla:coef_mod_estat_std')
align(out_estat_std.sum.t_tabla)<-'l|rrrrrr'
print(out_estat_std.sum.t_tabla,comment=FALSE,caption.placement = 'top')
#Predictions
par(mfrow=c(3,2))
# JPM_Dollar_Index vs. WTI
plot_RegvsWTI(x.name='JPM_Dollar_Index',out.yp=out_estat_std.yp,pos_leg='topleft')
# VIX_Index vs. WTI
plot_RegvsWTI(x.name='VIX_Index',out.yp=out_estat_std.yp,pos_leg='topleft')
# OPEP_TOTPROD vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTPROD',out.yp=out_estat_std.yp,pos_leg='topleft')
# OPEP_TOTDEM vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTDEM',out.yp=out_estat_std.yp,pos_leg='topleft')
# TBILL_10YR vs. WTI
plot_RegvsWTI(x.name='TBILL_10YR',out.yp=out_estat_std.yp,pos_leg='topright')
# TBILL_1YR vs. WTI
plot_RegvsWTI(x.name='TBILL_1YR',out.yp=out_estat_std.yp,pos_leg='topright')
#t vs y
par(mfrow=c(1,1))
plot_tsWTI(out.yp=out_estat_std.yp,pos_leg='topleft')
source('Modelos/Modelo_Dinamico_Std.R')
source('Modelos/Modelo_Dinamico_Std.R')
#Tabla resumen
out_dinam_std.sum.t_alpha_tabla<-xtable(out_dinam_std.sum.t_alpha,
caption='Interceptos Estimados para el Modelo Dinámico',
label='tabla:coef_mod_dinam_std')
align(out_dinam_std.sum.t_alpha_tabla)<-'l|rrrrrr'
print(out_dinam_std.sum.t_alpha_tabla,comment=FALSE,caption.placement = 'top')
out_dinam_std.sum.t_beta_tabla<-xtable(out_dinam_std.sum.t_beta,
caption='Coeficientes Estimados para el Modelo Dinámico',
label='tabla:coef_mod_dinam_std')
align(out_dinam_std.sum.t_beta_tabla)<-'l|rrrrrr'
print(out_dinam_std.sum.t_beta_tabla,comment=FALSE,caption.placement = 'top')
#Tabla resumen
out_dinam_std.sum.t_alpha_tabla<-xtable(out_dinam_std.sum.t_alpha,
caption='Interceptos Estimados para el Modelo Dinámico',
label='tabla:coef_mod_dinam_std')
align(out_dinam_std.sum.t_alpha_tabla)<-'l|rrrrrr'
print(out_dinam_std.sum.t_alpha_tabla,comment=FALSE,caption.placement = 'top')
out_dinam_std.sum.t_beta_tabla<-xtable(out_dinam_std.sum.t_beta,
caption='Coeficientes Estimados para el Modelo Dinámico',
label='tabla:coef_mod_dinam_std')
align(out_dinam_std.sum.t_beta_tabla)<-'l|rrrrrr'
print(out_dinam_std.sum.t_beta_tabla,comment=FALSE,caption.placement = 'top')
#Predictions
par(mfrow=c(3,2))
# JPM_Dollar_Index vs. WTI
plot_RegvsWTI(x.name='JPM_Dollar_Index',out.yp=out_dinam_std.yp,pos_leg='topleft')
# VIX_Index vs. WTI
plot_RegvsWTI(x.name='VIX_Index',out.yp=out_dinam_std.yp,pos_leg='topleft')
# OPEP_TOTPROD vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTPROD',out.yp=out_dinam_std.yp,pos_leg='topleft')
# OPEP_TOTDEM vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTDEM',out.yp=out_dinam_std.yp,pos_leg='topleft')
# TBILL_10YR vs. WTI
plot_RegvsWTI(x.name='TBILL_10YR',out.yp=out_dinam_std.yp,pos_leg='topright')
# TBILL_1YR vs. WTI
plot_RegvsWTI(x.name='TBILL_1YR',out.yp=out_dinam_std.yp,pos_leg='topright')
#t vs y
par(mfrow=c(1,1))
plot_tsWTI(out.yp=out_dinam_std.yp,pos_leg='topleft')
#betas
par(mfrow=c(3,2))
plot_beta_dinam_std<-plot_beta(out.beta=out_dinam_std.beta)
aux<-lapply(1:6,plot_beta_dinam_std)
source('Modelos/Mod_suav_10_Std.R')
#Tabla resumen
out_dinam_std_suav_10.sum.t_beta_tabla<-xtable(out_dinam_std_suav_10.sum.t_beta,
caption='Coeficientes Estimados para el Modelo Dinámico con lamba 10 y Datos Estandarizados',
label='tabla:coef_mod_dinam_suav_10_std')
align(out_dinam_std_suav_10.sum.t_beta_tabla)<-'l|rrrrrr'
print(out_dinam_std_suav_10.sum.t_beta_tabla,comment=FALSE,caption.placement = 'top')
#Predictions
par(mfrow=c(3,2))
# JPM_Dollar_Index vs. WTI
plot_RegvsWTI(x.name='JPM_Dollar_Index',out.yp=out_dinam_std_suav_10.yp,pos_leg='topleft')
# VIX_Index vs. WTI
plot_RegvsWTI(x.name='VIX_Index',out.yp=out_dinam_std_suav_10.yp,pos_leg='topright')
# OPEP_TOTPROD vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTPROD',out.yp=out_dinam_std_suav_10.yp,pos_leg='topleft')
# OPEP_TOTDEM vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTDEM',out.yp=out_dinam_std_suav_10.yp,pos_leg='topleft')
# TBILL_10YR vs. WTI
plot_RegvsWTI(x.name='TBILL_10YR',out.yp=out_dinam_std_suav_10.yp,pos_leg='topright')
# TBILL_1YR vs. WTI
plot_RegvsWTI(x.name='TBILL_1YR',out.yp=out_dinam_std_suav_10.yp,pos_leg='topright')
#t vs y
par(mfrow=c(1,1))
plot_tsWTI(out.yp=out_dinam_std_suav_10.yp,pos_leg='topleft')
#betas
par(mfrow=c(3,2))
plot_beta_dinam_std_suav_10<-plot_beta(out.beta=out_dinam_std_suav_10.beta)
aux<-lapply(1:6,plot_beta_dinam_std_suav_10)
source('Modelos/Mod_suav_100_Std.R')
#Tabla resumen
out_dinam_std_suav_100.sum.t_beta_tabla<-xtable(out_dinam_std_suav_100.sum.t_beta,
caption='Coeficientes Estimados para el \\eqref{eq:mod_dinam_suav_100_Std}',
label='tabla:coef_mod_dinam_std_suav_100')
align(out_dinam_std_suav_100.sum.t_beta_tabla)<-'l|rrrrrr'
print(out_dinam_std_suav_100.sum.t_beta_tabla,comment=FALSE,caption.placement = 'top')
#Predictions
par(mfrow=c(3,2))
# JPM_Dollar_Index vs. WTI
plot_RegvsWTI(x.name='JPM_Dollar_Index',out.yp=out_dinam_std_suav_100.yp,pos_leg='topleft')
# VIX_Index vs. WTI
plot_RegvsWTI(x.name='VIX_Index',out.yp=out_dinam_std_suav_100.yp,pos_leg='topright')
# OPEP_TOTPROD vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTPROD',out.yp=out_dinam_std_suav_100.yp,pos_leg='topleft')
# OPEP_TOTDEM vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTDEM',out.yp=out_dinam_std_suav_100.yp,pos_leg='topleft')
# TBILL_10YR vs. WTI
plot_RegvsWTI(x.name='TBILL_10YR',out.yp=out_dinam_std_suav_100.yp,pos_leg='topright')
# TBILL_1YR vs. WTI
plot_RegvsWTI(x.name='TBILL_1YR',out.yp=out_dinam_std_suav_100.yp,pos_leg='topright')
#t vs y
par(mfrow=c(1,1))
plot_tsWTI(out.yp=out_dinam_std_suav_100.yp,pos_leg='topleft')
#betas
par(mfrow=c(3,2))
plot_beta_dinam_std_suav_100<-plot_beta(out.beta=out_dinam_std_suav_100.beta)
aux<-lapply(1:6,plot_beta_dinam_std_suav_100)
source('Modelos/Mod_suav_1000_Std.R')
#Tabla resumen
out_dinam_std_suav_1000.sum.t_beta_tabla<-xtable(out_dinam_std_suav_1000.sum.t_beta,
caption='Coeficientes Estimados para el Modelo Dinámico con suavizamiento 1000',
label='tabla:coef_mod_dinam_suav_1000_Std')
align(out_dinam_std_suav_1000.sum.t_beta_tabla)<-'l|rrrrrr'
print(out_dinam_std_suav_1000.sum.t_beta_tabla,comment=FALSE,caption.placement = 'top')
#Predictions
par(mfrow=c(3,2))
# JPM_Dollar_Index vs. WTI
plot_RegvsWTI(x.name='JPM_Dollar_Index',out.yp=out_dinam_std_suav_100000.yp,pos_leg='topleft')
#Predictions
par(mfrow=c(3,2))
# JPM_Dollar_Index vs. WTI
plot_RegvsWTI(x.name='JPM_Dollar_Index',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topleft')
# VIX_Index vs. WTI
plot_RegvsWTI(x.name='VIX_Index',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topright')
# OPEP_TOTPROD vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTPROD',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topleft')
# OPEP_TOTDEM vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTDEM',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topleft')
# TBILL_10YR vs. WTI
plot_RegvsWTI(x.name='TBILL_10YR',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topright')
# TBILL_1YR vs. WTI
plot_RegvsWTI(x.name='TBILL_1YR',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topright')
#t vs y
par(mfrow=c(1,1))
plot_tsWTI(out.yp=out_dinam_std_suav_100000.yp,pos_leg='topleft')
#t vs y
par(mfrow=c(1,1))
plot_tsWTI(out.yp=out_dinam_std_suav_1000.yp,pos_leg='topleft')
source('Modelos/Mod_suav_1000_Std.R')
#Predictions
par(mfrow=c(3,2))
# JPM_Dollar_Index vs. WTI
plot_RegvsWTI(x.name='JPM_Dollar_Index',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topleft')
# VIX_Index vs. WTI
plot_RegvsWTI(x.name='VIX_Index',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topright')
# OPEP_TOTPROD vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTPROD',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topleft')
# OPEP_TOTDEM vs. WTI
plot_RegvsWTI(x.name='OPEP_TOTDEM',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topleft')
# TBILL_10YR vs. WTI
plot_RegvsWTI(x.name='TBILL_10YR',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topright')
# TBILL_1YR vs. WTI
plot_RegvsWTI(x.name='TBILL_1YR',out.yp=out_dinam_std_suav_1000.yp,pos_leg='topright')
#t vs y
par(mfrow=c(1,1))
plot_tsWTI(out.yp=out_dinam_std_suav_1000.yp,pos_leg='topleft')
#betas
par(mfrow=c(3,2))
plot_beta_dinam_std_suav_1000<-plot_beta(out.beta=out_dinam_std_suav_1000.beta)
aux<-lapply(1:6,plot_beta_dinam_std_suav_1000)
